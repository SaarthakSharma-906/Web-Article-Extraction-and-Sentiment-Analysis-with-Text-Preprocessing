import os
import pandas as pd

class TextCleaner:
    #stopword_file_path is path for folder that contains StopWords file, text_files_path is path for files in Text file folder generated by running data_extraction.py
    def __init__(self, stopword_files_path=r"C:\Users\Saarthak\Desktop\Test assignment 2\StopWords-20240402T075003Z-001\StopWords", text_files_path='C:\\Users\\Saarthak\\Desktop\\Test assignment 2\\Text Files'):
        self.stopwords = self.load_stopwords(stopword_files_path)
        self.text_files_path = text_files_path
        self.clean_files_path = r"C:\Users\Saarthak\Desktop\Test assignment 2\Cleaned Files"   #Create a folder for storing cleaned files and add it's path here
        os.makedirs(self.clean_files_path, exist_ok=True)



    #function for loading stopwords
    def load_stopwords(self, stopword_files_path):
        stopwords = []
        for filename in os.listdir(stopword_files_path):
            with open(os.path.join(stopword_files_path, filename), 'r', encoding='ISO-8859-1') as file:
                stopwords += file.read().splitlines()
        return set(stopwords)

    #returns punctuation characters
    def is_punctuation(self, char):
        punctuation_chars = set(".,!?;:'()[]{}-\"")
        return char in punctuation_chars



    #function to remove punctutaions
    def clean_text(self, text):
        cleaned_text = []
        words = text.split()
        for word in words:
            # Remove punctuation from the beginning and end of the word
            while word and self.is_punctuation(word[0]):
                word = word[1:]
            while word and self.is_punctuation(word[-1]):
                word = word[:-1]
            # Remove stopwords
            if word.lower() not in self.stopwords:
                cleaned_text.append(word)
        return ' '.join(cleaned_text)


    #removing stopwords and punctuations and saving them to cleaned files folder
    def clean_text_files(self):
        for filename in os.listdir(self.text_files_path):
            with open(os.path.join(self.text_files_path, filename), 'r', encoding='utf-8') as file:
                text = file.read()
                cleaned_text = self.clean_text(text)
                cleaned_filename = f"Cleaned_{filename}"
                with open(os.path.join(self.clean_files_path, cleaned_filename), 'w', encoding='utf-8') as cleaned_file:
                    cleaned_file.write(cleaned_text)

# Example usage
cleaner = TextCleaner()
cleaner.clean_text_files()







#loading clean text into a csv similar to final1.csv we are naming it as final2.csv
import os

class Cleantextextractor:
    def __init__(self, text_files_path=r'C:\Users\Saarthak\Desktop\Test assignment 2\Cleaned Files'):
        self.data = pd.read_excel(r'C:\Users\Saarthak\Desktop\Test assignment 2\Input.xlsx')
        self.text_files_path = text_files_path

    def load_cleaned_text(self, filename):
        file_path = os.path.join(self.text_files_path, filename)
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        else:
            print(f"File not found: {file_path}")
            return None

    def update_article_text(self):
        for i, row in self.data.iterrows():
            url_id = row['URL_ID']
            cleaned_filename = f"Cleaned_{url_id}.txt"
            cleaned_text = self.load_cleaned_text(cleaned_filename)

            if cleaned_text:
                self.data.at[i, 'article_text'] = cleaned_text

    def save_to_csv(self):
        self.data.to_csv(r"C:\Users\Saarthak\Desktop\Test assignment 2\final2.csv", index=False)

# Example usage
extractor = Cleantextextractor()
extractor.update_article_text()
extractor.save_to_csv()
